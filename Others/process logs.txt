#!/bin/bash

# Define your categories and BIC lists here
declare -A CATEGORIES=(
    ["BIG"]="BQWERTYU,BQWERTYI"
    ["MEDIUM"]="MQWERTYU,MQWERTYI"
    ["SMALL"]="SQWERTYU,SQWERTYI"
    ["LARGE"]="LQWERTYU,LQWERTYI"  # Example additional category
)

awk -v categories_str="${!CATEGORIES[*]}" '
BEGIN {
    # Split categories into array and create bic mapping
    split(categories_str, categories, " ");
    for (cat in categories) {
        actual_cat = categories[cat];
        split(ENVIRON["CATEGORIES_" actual_cat], bics, ",");
        for (i in bics) bic_to_category[bics[i]] = actual_cat;
    }
    
    # Calculate column widths
    msg_col_width = 15;
    num_col_width = 10;
    total_width = msg_col_width + 3;  # 3 for borders
    
    # Build header and separator
    header = sprintf("| %-*s |", msg_col_width, "");
    separator = "-------------------------";
    for (c in categories) {
        cat = categories[c];
        header = header sprintf(" %-*s |", num_col_width, cat);
        separator = separator "------------------";
        col_order[++num_cols] = cat;
        total_width += num_col_width + 3;  # +3 for spaces and pipes
    }
    header = header sprintf(" %-*s |", num_col_width, "SUM");
    separator = separator "------------------|";
    total_width += num_col_width + 3;
}

{
    # Processing logic remains the same as previous versions
    # ... (omitted for brevity, use the same regex logic as before)
}

END {
    # Print table header
    print substr(separator, 1, total_width);
    print header;
    print substr(separator, 1, total_width);

    # Print data rows
    for (i = 1; i <= num_msg; i++) {
        msg = sorted_msg[i];
        row_total = 0;
        row = sprintf("| %-*s |", msg_col_width, msg);
        
        # Get counts per category
        for (c = 1; c <= num_cols; c++) {
            cat = col_order[c];
            count = counts[msg][cat] ? counts[msg][cat] : 0;
            row = row sprintf(" %*d |", num_col_width-1, count);
            row_total += count;
            col_total[cat] += count;
        }
        
        # Add SUM column
        print row sprintf(" %*d |", num_col_width-1, row_total);
        grand_total += row_total;
    }

    # Print totals row
    print substr(separator, 1, total_width);
    total_row = sprintf("| %-*s |", msg_col_width, "SUM");
    sum_total = 0;
    for (c = 1; c <= num_cols; c++) {
        cat = col_order[c];
        total_row = total_row sprintf(" %*d |", num_col_width-1, col_total[cat]);
        sum_total += col_total[cat];
    }
    print total_row sprintf(" %*d |", num_col_width-1, sum_total);
    print substr(separator, 1, total_width);
}' "$1"