#!/bin/bash

# Define your categories and BIC lists here
declare -A CATEGORIES=(
    ["BIG"]="BQWERTYU,BQWERTYI"
    ["MEDIUM"]="MQWERTYU,MQWERTYI"
    ["SMALL"]="SQWERTYU,SQWERTYI"
)

# Export categories for AWK
export CATEGORIES_STR="${!CATEGORIES[*]}"
for category in "${!CATEGORIES[@]}"; do
    export "CATEGORIES_$category"="${CATEGORIES[$category]}"
done

awk '
BEGIN {
    # Split categories from environment variable
    split(ENVIRON["CATEGORIES_STR"], categories, " ");
    
    # Create BIC-to-category mapping
    for (i in categories) {
        cat = categories[i];
        split(ENVIRON["CATEGORIES_" cat], bics, ",");
        for (j in bics) bic_to_category[bics[j]] = cat;
    }
    
    # Initialize column settings
    msg_col_width = 15;
    num_col_width = 10;
    separator = "------------------------------------------------------------";
}

/Sending BIC:|BATCH BIC:/ {
    # Process Sending lines
    if ($0 ~ /Sending BIC:/) {
        if (match($0, /Sending BIC: ([A-Z0-9]+).* - ([A-Z0-9]+)$/)) {
            bic = substr($0, RSTART+12, RLENGTH-12);
            split(substr($0, RSTART, RLENGTH), m, / - /);
            msg_type = m[2];
            cat = bic_to_category[m[1]];
            if (cat) {
                counts[msg_type][cat]++;
                msg_types[msg_type] = 1;
            }
        }
    }
    # Process Batch lines
    else if (match($0, /BIC: ([A-Z0-9]+),/)) {
        bic = substr($0, RSTART+5, RLENGTH-6);
        cat = bic_to_category[bic];
        if (cat) {
            rest = substr($0, RSTART+RLENGTH);
            while (match(rest, /([A-Z0-9]+): *([0-9]+)/)) {
                msg_type = substr(rest, RSTART, RLENGTH);
                split(msg_type, parts, /: */);
                counts[parts[1]][cat] += parts[2];
                msg_types[parts[1]] = 1;
                rest = substr(rest, RSTART+RLENGTH);
            }
        }
    }
}

END {
    # Sort message types
    num_msg = asorti(msg_types, sorted_msg);
    
    # Build header
    printf "%s\n", separator;
    printf "| %-15s |", "";
    for (i in categories) {
        printf " %-9s |", categories[i];
    }
    printf " %-9s |\n", "SUM";
    printf "%s\n", separator;
    
    # Print data rows
    for (i = 1; i <= num_msg; i++) {
        msg = sorted_msg[i];
        printf "| %-15s |", msg;
        row_total = 0;
        for (j in categories) {
            cat = categories[j];
            count = counts[msg][cat] ? counts[msg][cat] : 0;
            printf " %9d |", count;
            row_total += count;
            col_total[cat] += count;
        }
        printf " %9d |\n", row_total;
        grand_total += row_total;
    }
    
    # Print totals row
    printf "%s\n", separator;
    printf "| %-15s |", "SUM";
    sum_total = 0;
    for (j in categories) {
        cat = categories[j];
        total = col_total[cat] ? col_total[cat] : 0;
        printf " %9d |", total;
        sum_total += total;
    }
    printf " %9d |\n", sum_total;
    printf "%s\n", separator;
}' "$1"