#!/bin/bash

# Define the BIC categories
BIG="BQWERTYU,BQWERTYI"
MEDIUM="MQWERTYU,MQWERTYI"
SMALL="SQWERTYU,SQWERTYI"

# Use awk to process the log file
awk -v BIG="$BIG" -v MEDIUM="$MEDIUM" -v SMALL="$SMALL" '
BEGIN {
    # Split the BIC lists into associative arrays for category lookup
    split(BIG, big_bics, ",");
    for (i in big_bics) bic_category[big_bics[i]] = "BIG";
    split(MEDIUM, medium_bics, ",");
    for (i in medium_bics) bic_category[medium_bics[i]] = "MEDIUM";
    split(SMALL, small_bics, ",");
    for (i in small_bics) bic_category[small_bics[i]] = "SMALL";
    
    # Initialize the counts structure and categories order
    num_cats = 3;
    cat_order[1] = "BIG";
    cat_order[2] = "MEDIUM";
    cat_order[3] = "SMALL";
}

{
    if ($0 ~ /Sending BIC:/) {
        # Process Sending lines
        if (match($0, /Sending BIC: ([A-Z0-9]+).* - ([A-Z0-9]+)/, m)) {
            bic = m[1];
            msg_type = m[2];
            cat = bic_category[bic];
            if (cat) {
                counts[msg_type][cat]++;
                msg_types[msg_type] = 1;
            }
        }
    } else if ($0 ~ /Batch BIC:/) {
        # Process Batch lines
        if (match($0, /Batch BIC: ([A-Z0-9]+)[[:space:]]*-/, m)) {
            bic = m[1];
            cat = bic_category[bic];
            if (cat) {
                rest = substr($0, RSTART + RLENGTH);
                n = split(rest, parts, /,[[:space:]]*/);
                for (i = 1; i <= n; i++) {
                    if (match(parts[i], /^[[:space:]]*([A-Z0-9]+):[[:space:]]*([0-9]+)/, m_part)) {
                        msg_type = m_part[1];
                        count = m_part[2];
                        counts[msg_type][cat] += count;
                        msg_types[msg_type] = 1;
                    }
                }
            }
        }
    }
}

END {
    # Collect and sort message types
    num_msg = 0;
    for (msg in msg_types) {
        msg_list[num_msg++] = msg;
    }
    if (num_msg > 0) {
        # Sort message types alphabetically
        asort(msg_list);
    }
    
    # Print header
    printf "%-20s", "";
    for (c = 1; c <= num_cats; c++) {
        printf "%-10s", cat_order[c];
    }
    printf "\n";
    
    # Print each message type row
    for (i = 1; i <= num_msg; i++) {
        msg = msg_list[i];
        printf "%-20s", msg;
        for (c = 1; c <= num_cats; c++) {
            cat = cat_order[c];
            total = counts[msg][cat] ? counts[msg][cat] : 0;
            printf "%-10d", total;
        }
        printf "\n";
    }
}' $1  # Pass the log file as the first argument to the script