async function navigateAndCaptureScreenshot(targetUrl, targetText, screenshotName) {
  try {
    // Step 1: Navigate to the target URL
    console.log(`Navigating to ${targetUrl}...`);
    navigateToUrl(targetUrl);

    // Step 2: Wait for the target text to appear on the page
    console.log(`Waiting for text "${targetText}" to appear...`);
    await waitForContent(targetText, 15000); // 15-second timeout

    // Step 3: Capture the screenshot
    console.log(`Target text "${targetText}" detected! Capturing screenshot...`);
    captureScreenshot(screenshotName);

    console.log(`Screenshot saved as: ${screenshotName}`);
  } catch (error) {
    console.error('Error during navigation and screenshot capture:', error);
  }
}

// Helper function to navigate to the target URL
function navigateToUrl(targetUrl) {
  // Use the History API to change the URL and trigger navigation
  window.history.pushState({}, '', targetUrl);

  // Trigger the popstate event manually to mimic navigation behavior
  window.dispatchEvent(new Event('popstate'));
}

// Helper function to wait for specific content on the page
function waitForContent(targetText, timeout = 10000) {
  return new Promise((resolve, reject) => {
    const startTime = Date.now();

    const checkContent = () => {
      const bodyText = document.body.innerText || document.body.textContent;
      if (bodyText.includes(targetText)) {
        resolve();
      } else if (Date.now() - startTime > timeout) {
        reject(new Error(`Timeout: Text "${targetText}" not found within ${timeout}ms.`));
      } else {
        setTimeout(checkContent, 100); // Retry every 100ms
      }
    };

    checkContent();
  });
}

// Helper function to capture a screenshot
function captureScreenshot(fileName) {
  console.log('Taking screenshot...');
  chrome.runtime.sendMessage(
    { action: 'captureVisibleTab' },
    function (screenshotUrl) {
      if (chrome.runtime.lastError) {
        console.error('Error taking screenshot:', chrome.runtime.lastError.message);
        return;
      }

      // Create a download link for the screenshot
      const link = document.createElement('a');
      link.href = screenshotUrl;
      link.download = fileName;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  );
}

// Example usage
navigateAndCaptureScreenshot(
  '/new-page-url',      // Relative or absolute URL
  'Statistics',         // Text to wait for
  'page-screenshot.png' // Screenshot file name
);
