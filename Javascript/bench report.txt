// Function to download a file
async function downloadFile(url, fileName) {
  try {
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`Failed to fetch ${url}: ${response.statusText}`);
    }
    const blob = await response.blob();

    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = fileName;

    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    URL.revokeObjectURL(link.href);

    console.log(`Downloaded: ${fileName}`);
  } catch (error) {
    console.error(`Error downloading ${fileName}:`, error);
  }
}

async function capturePageScreenshot(linkSelector, textToWaitFor, screenshotName) {
  try {
    // Step 1: Find and click the link
    const linkElement = document.querySelector(linkSelector);
    if (!linkElement) {
      throw new Error(`Link not found with selector: ${linkSelector}`);
    }

    console.log('Clicking link and waiting for navigation or content...');
    await waitForNavigationAndContent(linkElement, textToWaitFor);

    console.log('Text found. Taking screenshot...');

    // Step 2: Take a screenshot (DevTools-specific API)
    const screenshot = await new Promise((resolve, reject) => {
      try {
        chrome.runtime.sendMessage(
          { action: 'captureVisibleTab' },
          result => resolve(result)
        );
      } catch (error) {
        reject(error);
      }
    });

    // Save the screenshot
    const link = document.createElement('a');
    link.href = screenshot;
    link.download = screenshotName;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    console.log(`Screenshot saved as: ${screenshotName}`);
  } catch (error) {
    console.error('Error capturing screenshot:', error);
  }
}

// Helper function to wait for navigation and content change
async function waitForNavigationAndContent(linkElement, textToWaitFor, timeout = 15000) {
  return new Promise((resolve, reject) => {
    const initialUrl = window.location.href;
    let timeoutId;
    let observer;

    const cleanup = () => {
      clearTimeout(timeoutId);
      if (observer) observer.disconnect();
    };

    const checkForText = () => {
      const bodyText = document.body.innerText || document.body.textContent;
      if (bodyText.includes(textToWaitFor)) {
        cleanup();
        resolve();
      }
    };

    const waitForUrlChange = () => {
      const currentUrl = window.location.href;
      if (currentUrl !== initialUrl) {
        console.log(`URL changed to ${currentUrl}`);
        setTimeout(checkForText, 500); // Give DOM a moment to update
      }
    };

    // Set up a MutationObserver to watch for content changes
    observer = new MutationObserver(() => {
      checkForText();
    });
    observer.observe(document.body, { childList: true, subtree: true });

    // Set a timeout to prevent hanging indefinitely
    timeoutId = setTimeout(() => {
      cleanup();
      reject(new Error(`Timeout: Text "${textToWaitFor}" not found on the page within ${timeout}ms.`));
    }, timeout);

    // Listen for URL changes
    const urlCheckInterval = setInterval(() => {
      waitForUrlChange();
      if (window.location.href !== initialUrl) {
        clearInterval(urlCheckInterval);
      }
    }, 100);

    // Trigger navigation by clicking the link
    linkElement.click();

    // Perform an initial check for the text
    checkForText();
  });
}



// Example Usage:
// Download files
const filesToDownload = [
  { url: 'https://example.com/file1.zip', name: 'test-123.zip' },
  { url: 'https://example.com/file2.pdf', name: 'example-file.pdf' },
];
filesToDownload.forEach(file => downloadFile(file.url, file.name));

// Capture a screenshot
capturePageScreenshot(
  'a.example-link', // Selector for the link to click
  () => [...document.querySelectorAll('p.dashboard-title')].find(el => el.textContent.trim() === 'Statistics'), // Function to locate the element
  'page-screenshot.png' // Desired screenshot file name
);