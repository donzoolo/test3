async function startFromURL(targetUrl, textToWaitFor, screenshotName) {
  try {
    console.log(`Fetching content from: ${targetUrl}...`);

    // Step 1: Fetch the page content to verify accessibility
    const response = await fetch(targetUrl);
    if (!response.ok) {
      throw new Error(`Failed to fetch ${targetUrl}: ${response.statusText}`);
    }

    // Replace the current document with the fetched content
    const html = await response.text();
    document.open();
    document.write(html);
    document.close();

    console.log('Page content loaded into the browser.');

    // Step 2: Wait for the desired text to appear dynamically
    console.log(`Waiting for target text "${textToWaitFor}"...`);
    await waitForTextOnPage(textToWaitFor, 15000); // 15-second timeout

    console.log(`Target text "${textToWaitFor}" detected! Capturing screenshot...`);

    // Step 3: Capture the screenshot
    captureScreenshot(screenshotName);
  } catch (error) {
    console.error('Error during execution:', error);
  }
}

// Helper function to wait for specific text to appear dynamically
function waitForTextOnPage(targetText, timeout = 10000) {
  return new Promise((resolve, reject) => {
    const startTime = Date.now();

    const checkForText = () => {
      const bodyText = document.body.innerText || document.body.textContent;
      if (bodyText.includes(targetText)) {
        resolve();
      } else if (Date.now() - startTime > timeout) {
        reject(new Error(`Timeout: Text "${targetText}" not found within ${timeout}ms.`));
      } else {
        setTimeout(checkForText, 100);
      }
    };

    checkForText();
  });
}

// Helper function to capture a screenshot
function captureScreenshot(fileName) {
  console.log('Taking screenshot...');
  chrome.runtime.sendMessage(
    { action: 'captureVisibleTab' },
    function (screenshotUrl) {
      if (chrome.runtime.lastError) {
        console.error('Error taking screenshot:', chrome.runtime.lastError.message);
        return;
      }

      // Create a download link for the screenshot
      const link = document.createElement('a');
      link.href = screenshotUrl;
      link.download = fileName;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      console.log(`Screenshot saved as: ${fileName}`);
    }
  );
}

// Example usage
startFromURL(
  'https://example.com/page-to-capture', // Target URL
  'Statistics',                         // Text to wait for
  'page-screenshot.png'                 // Screenshot file name
);
