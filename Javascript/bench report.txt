// Function to download a file
async function downloadFile(url, fileName) {
  try {
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`Failed to fetch ${url}: ${response.statusText}`);
    }
    const blob = await response.blob();

    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = fileName;

    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    URL.revokeObjectURL(link.href);

    console.log(`Downloaded: ${fileName}`);
  } catch (error) {
    console.error(`Error downloading ${fileName}:`, error);
  }
}

async function capturePageScreenshot(linkSelector, elementLocator, screenshotName) {
  try {
    // Step 1: Find and click the link
    const linkElement = document.querySelector(linkSelector);
    if (!linkElement) {
      throw new Error(`Link not found with selector: ${linkSelector}`);
    }

    console.log('Clicking link...');
    linkElement.click();

    // Step 2: Wait for the target element to become visible
    console.log('Waiting for target element to be visible...');
    const targetElement = await waitForElement(elementLocator, 10000); // 10-second timeout

    console.log('Scrolling to element...');
    targetElement.scrollIntoView({ behavior: 'smooth' });

    // Wait briefly to ensure the scroll is completed
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Step 3: Take a screenshot (DevTools-specific API)
    console.log('Taking screenshot...');
    const screenshot = await new Promise((resolve, reject) => {
      try {
        chrome.runtime.sendMessage(
          { action: 'captureVisibleTab' },
          result => resolve(result)
        );
      } catch (error) {
        reject(error);
      }
    });

    // Save the screenshot
    const link = document.createElement('a');
    link.href = screenshot;
    link.download = screenshotName;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    console.log(`Screenshot saved as: ${screenshotName}`);
  } catch (error) {
    console.error('Error capturing screenshot:', error);
  }
}

// Helper function to wait for an element to become visible
function waitForElement(elementLocator, timeout = 5000) {
  return new Promise((resolve, reject) => {
    const intervalTime = 100; // Check every 100ms
    const startTime = Date.now();

    const checkVisibility = () => {
      const targetElement =
        typeof elementLocator === 'function'
          ? elementLocator()
          : document.querySelector(elementLocator);

      if (targetElement && isElementVisible(targetElement)) {
        resolve(targetElement);
      } else if (Date.now() - startTime > timeout) {
        reject(new Error('Timeout: Element not found or not visible within time limit.'));
      } else {
        setTimeout(checkVisibility, intervalTime);
      }
    };

    checkVisibility();
  });
}

// Helper function to check if an element is visible
function isElementVisible(element) {
  const rect = element.getBoundingClientRect();
  return (
    rect.width > 0 &&
    rect.height > 0 &&
    rect.top >= 0 &&
    rect.left >= 0 &&
    rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
    rect.right <= (window.innerWidth || document.documentElement.clientWidth)
  );
}


// Example Usage:
// Download files
const filesToDownload = [
  { url: 'https://example.com/file1.zip', name: 'test-123.zip' },
  { url: 'https://example.com/file2.pdf', name: 'example-file.pdf' },
];
filesToDownload.forEach(file => downloadFile(file.url, file.name));

// Capture a screenshot
capturePageScreenshot(
  'a.example-link', // Selector for the link to click
  () => [...document.querySelectorAll('p.dashboard-title')].find(el => el.textContent.trim() === 'Statistics'), // Function to locate the element
  'page-screenshot.png' // Desired screenshot file name
);