async function navigateAndCaptureScreenshot(targetUrl, targetText, screenshotName) {
  try {
    console.log(`Navigating to ${targetUrl}...`);
    window.location.href = targetUrl;

    // Wait for the page to load
    await waitForPageLoad();

    console.log('Page loaded. Monitoring for target text...');
    // Monitor the DOM for the target text
    await monitorDOMForText(targetText, 15000); // 15-second timeout

    console.log(`Target text "${targetText}" detected! Capturing screenshot...`);
    // Capture the screenshot
    captureScreenshot(screenshotName);
  } catch (error) {
    console.error('Error during navigation and screenshot capture:', error);
  }
}

// Helper function to wait for the page to fully load
function waitForPageLoad() {
  return new Promise((resolve) => {
    if (document.readyState === 'complete') {
      resolve(); // Page is already fully loaded
    } else {
      window.addEventListener('load', () => resolve(), { once: true });
    }
  });
}

// Helper function to monitor the DOM for specific text
function monitorDOMForText(targetText, timeout = 10000) {
  return new Promise((resolve, reject) => {
    const startTime = Date.now();

    // Check if the text is already present
    const checkText = () => {
      const bodyText = document.body.innerText || document.body.textContent;
      if (bodyText.includes(targetText)) {
        resolve();
      } else if (Date.now() - startTime > timeout) {
        reject(new Error(`Timeout: Text "${targetText}" not found within ${timeout}ms.`));
      } else {
        // Retry after a short delay
        setTimeout(checkText, 100);
      }
    };

    checkText();
  });
}

// Helper function to capture a screenshot
function captureScreenshot(fileName) {
  console.log('Taking screenshot...');
  chrome.runtime.sendMessage(
    { action: 'captureVisibleTab' },
    function (screenshotUrl) {
      if (chrome.runtime.lastError) {
        console.error('Error taking screenshot:', chrome.runtime.lastError.message);
        return;
      }

      // Create a download link for the screenshot
      const link = document.createElement('a');
      link.href = screenshotUrl;
      link.download = fileName;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      console.log(`Screenshot saved as: ${fileName}`);
    }
  );
}

// Example Usage
navigateAndCaptureScreenshot(
  'https://example.com/page-to-capture', // URL to navigate to
  'Statistics',                         // Text to wait for
  'page-screenshot.png'                 // Screenshot file name
);
