manifest.json
{
  "manifest_version": 3,
  "name": "Report Screenshotter",
  "version": "1.0",
  "permissions": [
    "tabs",
    "downloads",
    "activeTab"
  ],
  "background": {
    "service_worker": "background.js"
  },
  "action": {
    "default_title": "Capture Reports"
  }
}
background.js
// Define your URLs and filenames.
const tasks = [
  { url: "http://something.com/report", filename: "report.png" },
  { url: "http://something2.com/report2", filename: "report2.png" }
];

/**
 * Returns a promise that resolves with the tab id when the tab finishes loading.
 */
function updateTab(url) {
  return new Promise((resolve) => {
    chrome.tabs.update({ url: url }, (tab) => {
      // Listen for the tab update (when the page load status becomes "complete").
      chrome.tabs.onUpdated.addListener(function listener(tabId, changeInfo) {
        if (tabId === tab.id && changeInfo.status === "complete") {
          chrome.tabs.onUpdated.removeListener(listener);
          // Add a slight delay to be sure all rendering is complete.
          setTimeout(() => resolve(tabId), 1000);
        }
      });
    });
  });
}

/**
 * Returns a promise that resolves with the captured data URL of the visible tab.
 */
function captureTab() {
  return new Promise((resolve, reject) => {
    chrome.tabs.captureVisibleTab(null, { format: "png" }, (dataUrl) => {
      if (chrome.runtime.lastError) {
        return reject(chrome.runtime.lastError);
      }
      resolve(dataUrl);
    });
  });
}

/**
 * Triggers a download of the provided data URL using chrome.downloads.download.
 */
function downloadDataUrl(dataUrl, filename) {
  chrome.downloads.download({
    url: dataUrl,
    filename: filename,
    saveAs: false
  });
}

/**
 * Processes all tasks sequentially.
 */
async function processTasks() {
  // Query the active tab in the current window.
  const [activeTab] = await chrome.tabs.query({ active: true, currentWindow: true });
  if (!activeTab) {
    console.error("No active tab found!");
    return;
  }

  // Loop through each task sequentially.
  for (const task of tasks) {
    console.log(`Navigating to ${task.url} ...`);
    await updateTab(task.url);
    console.log(`Page loaded. Capturing screenshot...`);
    const dataUrl = await captureTab();
    console.log(`Screenshot captured. Downloading as ${task.filename} ...`);
    downloadDataUrl(dataUrl, task.filename);
    // Optional: Wait a few seconds before processing the next URL.
    await new Promise((resolve) => setTimeout(resolve, 2000));
  }
  console.log("All tasks completed.");
}

// When the user clicks the extensionâ€™s icon, run the process.
chrome.action.onClicked.addListener(() => {
  processTasks().catch((err) => console.error("Error processing tasks:", err));
});
