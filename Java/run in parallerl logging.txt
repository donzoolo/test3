import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;
import org.junit.jupiter.api.extension.ExtensionContext;
import org.junit.jupiter.api.extension.TestWatcher;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;

public class LoggingTestWatcherExtension implements TestWatcher, BeforeTestExecutionCallback {
    private static final Logger logger = LoggerFactory.getLogger(LoggingTestWatcherExtension.class);
    private static final AtomicInteger testCounter = new AtomicInteger(0);

    @Override
    public void beforeTestExecution(ExtensionContext context) {
        int testId = testCounter.incrementAndGet();
        logMessage(context, "starting", testId);
    }

    @Override
    public void testSuccessful(ExtensionContext context) {
        logMessage(context, "successful");
    }

    @Override
    public void testFailed(ExtensionContext context, Throwable cause) {
        logMessage(context, "failed");
    }

    @Override
    public void testAborted(ExtensionContext context, Throwable cause) {
        logMessage(context, "aborted");
    }

    @Override
    public void testDisabled(ExtensionContext context, Optional<String> reason) {
        logMessage(context, "disabled");
    }

    private void logMessage(ExtensionContext context, String status) {
        int testId = testCounter.get();
        logMessage(context, status, testId);
    }

    private void logMessage(ExtensionContext context, String status, int testId) {
        String message = String.format("Test [%d - %s]: %s %s", testId, Thread.currentThread().getName(), context.getDisplayName(), status);
        String border = createBorder(message.length());
        logger.info("\n{}\n= {} =\n{}", border, message, border);
    }

    private String createBorder(int length) {
        StringBuilder border = new StringBuilder("=");
        for (int i = 0; i < length + 4; i++) { // +4 to account for the spaces and " ="
            border.append("=");
        }
        return border.toString();
    }
}